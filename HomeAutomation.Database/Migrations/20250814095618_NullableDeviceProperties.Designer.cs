// <auto-generated />
using System;
using HomeAutomation.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HomeAutomation.Database.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250814095618_NullableDeviceProperties")]
    partial class NullableDeviceProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActionEntityConditionEntity", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionsId")
                        .HasColumnType("integer");

                    b.HasKey("ActionsId", "ConditionsId");

                    b.HasIndex("ConditionsId");

                    b.ToTable("ActionEntityConditionEntity");
                });

            modelBuilder.Entity("ConditionEntityTriggerEntity", b =>
                {
                    b.Property<int>("ConditionsId")
                        .HasColumnType("integer");

                    b.Property<int>("TriggersId")
                        .HasColumnType("integer");

                    b.HasKey("ConditionsId", "TriggersId");

                    b.HasIndex("TriggersId");

                    b.ToTable("ConditionEntityTriggerEntity");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.ActionDeviceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("DeviceId");

                    b.ToTable("ActionDevices");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.ActionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeviceEventToSend")
                        .HasColumnType("integer");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("MessageChannel")
                        .HasColumnType("text");

                    b.Property<string>("MessageToSend")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.ConditionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeCompareKind")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeMode")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("TimeSpecified")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.DeviceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.LogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.MailMessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("EmlData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("MailMessages");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.SensorValueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("SensorValues");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.SunDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Sunrise")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("Sunset")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("SunData");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.TriggerActionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("integer");

                    b.Property<int>("TriggerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("TriggerId");

                    b.ToTable("TriggerActions");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.TriggerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int?>("ListenOnDeviceEvent")
                        .HasColumnType("integer");

                    b.Property<int?>("ListenOnDeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly?>("ScheduledAt")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("SchedulingMode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListenOnDeviceId");

                    b.ToTable("Triggers");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.WeatherForecastEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<double>("Rain")
                        .HasColumnType("double precision");

                    b.Property<string>("SymbolID")
                        .HasColumnType("text");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("ActionEntityConditionEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.ActionEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAutomation.Database.Entities.ConditionEntity", null)
                        .WithMany()
                        .HasForeignKey("ConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConditionEntityTriggerEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.ConditionEntity", null)
                        .WithMany()
                        .HasForeignKey("ConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAutomation.Database.Entities.TriggerEntity", null)
                        .WithMany()
                        .HasForeignKey("TriggersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.ActionDeviceEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.ActionEntity", "Action")
                        .WithMany("Devices")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAutomation.Database.Entities.DeviceEntity", "Device")
                        .WithMany("Actions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.ActionEntity", b =>
                {
                    b.OwnsOne("System.Collections.Generic.Dictionary<string, string>", "DeviceEventProperties", b1 =>
                        {
                            b1.Property<int>("ActionEntityId")
                                .HasColumnType("integer");

                            b1.HasKey("ActionEntityId");

                            b1.ToTable("Actions");

                            b1.ToJson("DeviceEventProperties");

                            b1.WithOwner()
                                .HasForeignKey("ActionEntityId");
                        });

                    b.Navigation("DeviceEventProperties");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.MailMessageEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.DeviceEntity", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.SensorValueEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.DeviceEntity", "Device")
                        .WithMany("SensorValues")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.TriggerActionEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.ActionEntity", "Action")
                        .WithMany("Triggers")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAutomation.Database.Entities.TriggerEntity", "Trigger")
                        .WithMany("Actions")
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.TriggerEntity", b =>
                {
                    b.HasOne("HomeAutomation.Database.Entities.DeviceEntity", "ListenOnDevice")
                        .WithMany("StateTriggers")
                        .HasForeignKey("ListenOnDeviceId");

                    b.Navigation("ListenOnDevice");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.ActionEntity", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.DeviceEntity", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("SensorValues");

                    b.Navigation("StateTriggers");
                });

            modelBuilder.Entity("HomeAutomation.Database.Entities.TriggerEntity", b =>
                {
                    b.Navigation("Actions");
                });
#pragma warning restore 612, 618
        }
    }
}
